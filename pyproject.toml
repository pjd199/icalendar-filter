[project]
name = "icalendar-filter"
version = "0.0.1"
authors = [{ name = "Pete Dibdin" }]
description = "iCalendar Filter"
keywords = [
    "iCalendar",
    "iCal",
    "ICS",
    "Calendar",
    "Filter",
    "AWS",
    "Lambda",
]
readme = "readme.md"
license = { file = "LICENSE" }
requires-python = ">=3.10"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: Flask",
    "Natural Language :: English",
]
dependencies = [
    "Flask>=3.0",
    "Flask-Cors>=4.0",
    "apig-wsgi>=2.18",
    "requests>=2.31",
    "icalendar>=5.0",
    "recurring-ical-events>=2.1",
]

[project.urls]
"Homepage" = "https://github.com/pjd199/icalendar-filter"

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.ruff]
select = [
    "E",   # pycodestyle error
    "F",   # pyflakes
    "B",   # bugbear
    "W",   # pycodestyle warning
    "C90", # mccabe complexity
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quote
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    #"PL", # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy-specific-rules
    "PERF", # perflint
    "RUF",  # ruff-specific-rules

]
ignore = [
    "B905",   # `zip()` without an explicit `strict=` parameter
    "ANN101", # Missing type annotation for `self` in method
]
fixable = ["ALL"]
src = ["src"]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101", # Use of `assert` detected
    "S603", # `subprocess` call: check for execution of untrusted input
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.pydoclint]
style = "google"
allow-init-docstring = true

[tool.mypy]
strict = true
